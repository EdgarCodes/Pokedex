{"version":3,"sources":["images/PokemonTypes_13.png","images/PokemonTypes_01.png","images/PokemonTypes_02.png","images/PokemonTypes_03.png","images/PokemonTypes_04.png","images/PokemonTypes_05.png","images/PokemonTypes_06.png","images/PokemonTypes_07.png","images/PokemonTypes_08.png","images/PokemonTypes_09.png","images/PokemonTypes_10.png","images/PokemonTypes_11.png","images/PokemonTypes_12.png","images/PokemonTypes_14.png","images/PokemonTypes_15.png","images/PokemonTypes_16.png","images/PokemonTypes_17.png","images/PokemonTypes_18.png","images/pokeball.png","helper.js","components/PokemonCard.js","components/Loading.js","components/Pokedex.js","components/Species.js","components/Stats.js","components/MoveLine.js","components/Moves.js","components/TypeLine.js","components/TypeMatchups.js","components/PokemonInfo.js","App.js","index.js"],"names":["module","exports","pad","num","size","s","String","length","chooseColor","type","capitalize","string","charAt","toUpperCase","slice","chooseType","normal","fire","fighting","water","flying","grass","poison","electric","ground","psychic","rock","ice","bug","dragon","ghost","dark","steel","fairy","getGenderRatio","f","toFeet","dm","realFeet","feet","Math","floor","round","evolutionLine","currentEvo","a","evolves_to","push","evolution","species","info","evolution_details","hasNext","getMoves","moveList","game","map","move","versionData","version_group_details","name","url","levelLearn","level_learned_at","moveLearnMethod","move_learn_method","getMoveMatchup","dmg","computedList","double_damage_from","effectiveness","half_damage_from","no_damage_from","PokemonCard","this","props","id","types","className","to","src","alt","key","Component","Loading","pokeballLogo","NUM_POKEMON","Pokedex","callBack","element","observer","current","disconnect","IntersectionObserver","entries","isIntersecting","LoadPokemon","console","log","observe","state","pokemon","loading","isLoadingMore","React","createRef","axios","get","pokemonList","pData","data","results","pk","pkInfo","Promise","all","pokemonData","setState","st","index","ref","style","display","goToPokemon","random","Species","backgroundColor","color","speciesInfo","eggGroups","egg","genderRatio","hatchRate","catchRate","height","meters","weight","Stats","stats","realStats","stat","base_stat","maxStat","max","getStats","i","width","MoveLine","category","attack","accuracy","pp","Moves","changeLearn","evt","currentMoves","moves","filter","target","getAttribute","moveData","test","damage_class","power","effect","effect_entries","background","onClick","TypeLine","times","typeEffect","TypeMatchups","fourTimesEffective","twoTimesEffective","notVeryEffective","notEffective","notDamaged","moveEffList","typeData","damage_relations","updatedFirstType","updatedSecondType","typeNameArray","item","includes","finalTypeMatchups","PokemonInfo","goNext","history","parseInt","goPrevious","goTo","genera","abilities","evoLine","match","params","url_pokemon","url_species","evoURL","evolution_chain","evolutions","chain","text","language","genus","egg_groups","group","gender_rate","hatch_counter","capture_rate","forEach","evo","split","sort","b","ability","is_hidden","bind","App","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0ab4e79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_13.6003c445.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_01.9796cb99.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_02.c5a34105.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_03.aea01696.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_04.fd993181.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_05.a057848e.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_06.b9bd5557.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_07.69f00541.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_08.f5f0d58c.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_09.90a34e07.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_10.5d3ffdcf.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_11.d59e3ea5.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_12.2af032e1.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_14.ec07f7fd.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_15.992f3920.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_16.62707948.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_17.35711eaa.png\";","module.exports = __webpack_public_path__ + \"static/media/PokemonTypes_18.a07ccb67.png\";","module.exports = __webpack_public_path__ + \"static/media/pokeball.174f6be2.png\";","import bug from \"./images/PokemonTypes_01.png\";\r\nimport dark from \"./images/PokemonTypes_02.png\";\r\nimport dragon from \"./images/PokemonTypes_03.png\";\r\nimport electric from \"./images/PokemonTypes_04.png\";\r\nimport fairy from \"./images/PokemonTypes_05.png\";\r\nimport fighting from \"./images/PokemonTypes_06.png\";\r\nimport fire from \"./images/PokemonTypes_07.png\";\r\nimport flying from \"./images/PokemonTypes_08.png\";\r\nimport ghost from \"./images/PokemonTypes_09.png\";\r\nimport grass from \"./images/PokemonTypes_10.png\";\r\nimport ground from \"./images/PokemonTypes_11.png\";\r\nimport ice from \"./images/PokemonTypes_12.png\";\r\nimport normal from \"./images/PokemonTypes_13.png\";\r\nimport poison from \"./images/PokemonTypes_14.png\";\r\nimport psychic from \"./images/PokemonTypes_15.png\";\r\nimport rock from \"./images/PokemonTypes_16.png\";\r\nimport steel from \"./images/PokemonTypes_17.png\";\r\nimport water from \"./images/PokemonTypes_18.png\";\r\n\r\nconst pad = function(num, size) {\r\n    var s = String(num);\r\n    while (s.length < (size || 2)) {s = \"0\" + s;}\r\n    return s;\r\n}\r\n\r\n\r\nconst chooseColor = ((type) => {\r\n\r\n    switch(type){\r\n        case \"normal\":\r\n            return \"#A8A878\";\r\n        case \"fire\":\r\n            return \"#F08030\";\r\n        case \"fighting\":\r\n            return \"#C03028\";\r\n        case \"water\":\r\n            return \"#6890F0\";\r\n        case \"flying\":\r\n            return \"#A890F0\";\r\n        case \"grass\":\r\n            return \"#78C850\";\r\n        case \"poison\":\r\n            return \"#A040A0\";\r\n        case \"electric\":\r\n            return \"#F8D030\";\r\n        case \"ground\":\r\n            return \"#E0C068\";\r\n        case \"psychic\":\r\n            return \"#F85888\";\r\n        case \"rock\":\r\n            return \"#B8A038\";\r\n        case \"ice\":\r\n            return \"#98D8D8\";\r\n        case \"bug\":\r\n            return \"#A8B820\";\r\n        case \"dragon\":\r\n            return \"#7038F8\";\r\n        case \"ghost\":\r\n            return \"#705898\";\r\n        case \"dark\":\r\n            return \"#705848\";\r\n        case \"steel\":\r\n            return \"#B8B8D0\";\r\n        case \"fairy\":\r\n            return \"#EE99AC\";\r\n        default:\r\n            return \"grey\";\r\n    }\r\n});\r\n\r\nconst capitalize = ((string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n});\r\n\r\nconst chooseType = ((type) =>{\r\n    switch(type){\r\n        case \"normal\":\r\n            return normal;\r\n        case \"fire\":\r\n            return fire;\r\n        case \"fighting\":\r\n            return fighting;\r\n        case \"water\":\r\n            return water;\r\n        case \"flying\":\r\n            return flying;\r\n        case \"grass\":\r\n            return grass;\r\n        case \"poison\":\r\n            return poison;\r\n        case \"electric\":\r\n            return electric;\r\n        case \"ground\":\r\n            return ground;\r\n        case \"psychic\":\r\n            return psychic;\r\n        case \"rock\":\r\n            return rock;\r\n        case \"ice\":\r\n            return ice;\r\n        case \"bug\":\r\n            return bug;\r\n        case \"dragon\":\r\n            return dragon;\r\n        case \"ghost\":\r\n            return ghost;\r\n        case \"dark\":\r\n            return dark;\r\n        case \"steel\":\r\n            return steel;\r\n        case \"fairy\":\r\n            return fairy;\r\n        default:\r\n            return normal;\r\n    }\r\n});\r\n\r\nconst getGenderRatio = (num) =>{\r\n    if(num === -1) return [\"None\", \"None\"];\r\n\r\n    let f = num*12.5;\r\n\r\n    let m = 100-f;\r\n\r\n    return [m, f]\r\n}\r\n\r\nconst toMeters= (dm) =>{\r\n    return dm/10;\r\n}\r\n\r\nconst toFeet= (dm) =>{\r\n    let realFeet = dm/3.048;\r\n\r\n    let feet = Math.floor(realFeet);\r\n    let inches = Math.round((realFeet - feet) * 12);\r\n\r\n    return feet + \"'\" + inches + '\"';;\r\n}\r\n\r\nconst getStats = (stats) => {\r\n    const realStats = stats.map(stat => stat.base_stat);\r\n    //base_stats are in stats[i].base_stat\r\n    const maxStat = Math.max(...realStats);\r\n    \r\n    const toShow = realStats.map(stat =>{\r\n        return (stat/maxStat)*100 + \"%\"; \r\n    });\r\n\r\n    return toShow;\r\n}\r\n\r\nconst evolutionLine = (currentEvo, a = []) =>{\r\n    if(currentEvo.evolves_to.length === 0)\r\n    {\r\n        a.push({evolution: currentEvo.species,info:  currentEvo.evolution_details[0], hasNext: false})\r\n        return a;\r\n    }\r\n\r\n    a.push({evolution: currentEvo.species,info:  currentEvo.evolution_details[0], hasNext:true});\r\n\r\n    return evolutionLine(currentEvo.evolves_to[0], a);\r\n}\r\n\r\nconst getMoves = (moveList, game) =>{\r\n    //we want to get moveName, URL, level learn, move learn method name, version-group\r\n\r\n    const unFilterMoves = moveList.map(move =>{\r\n        const versionData = move.version_group_details[0];\r\n\r\n        return {\r\n            name: move.move.name, \r\n            url: move.move.url,\r\n            levelLearn : versionData.level_learned_at,\r\n            moveLearnMethod: versionData.move_learn_method.name\r\n        }\r\n    })\r\n\r\n    return unFilterMoves;\r\n}\r\n\r\nconst getMoveMatchup = (dmg) =>{\r\n    let computedList = [];\r\n    \r\n    computedList.push(...dmg.double_damage_from.map(type =>{\r\n        return {name: type.name, effectiveness: 2}\r\n    }));\r\n\r\n    computedList.push(...dmg.half_damage_from.map(type =>{\r\n        return {name: type.name, effectiveness: 0.5}\r\n    }));\r\n\r\n    computedList.push(...dmg.no_damage_from.map(type =>{\r\n        return {name: type.name, effectiveness: 0}\r\n    }));\r\n\r\n    return computedList;\r\n}\r\n\r\n\r\nexport {getMoveMatchup, pad, chooseColor, capitalize, chooseType, getGenderRatio, toFeet, toMeters, getStats, evolutionLine\r\n,getMoves};","import React, { Component } from 'react';\r\nimport { pad, capitalize, chooseType} from \"../helper\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./css/PokemonCard.css\";\r\n\r\nexport default class PokemonCard extends Component {\r\n    render() {\r\n        const {name, id, types} = this.props;\r\n\r\n        return (\r\n            <Link className=\"Pokecard\" to={`/pokedex/${id}`}>   \r\n                <h1 className=\"Pokecard-id\">{pad(id, 3)}</h1>\r\n                <h1 className=\"Pokecard-name\">{capitalize(name)}</h1>\r\n\r\n                <div className= \"Pokecard-img-container\">\r\n                    <img \r\n                    className= \"Pokecard-img\" \r\n                    src={`https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${pad(id, 3)}.png`} \r\n                    alt = {name}\r\n                    />\r\n                </div>\r\n\r\n                <div className = \"Pokecard-types\">\r\n                    {types.map(type => <img \r\n                    src={chooseType(type.name)} \r\n                    alt={type.name} \r\n                    key= {type.name}\r\n                    />)}\r\n                </div>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport pokeballLogo from \"../images/pokeball.png\";\r\nimport \"./css/Loading.css\";\r\n\r\nexport default class Loading extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"lds-ring\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <img \r\n                src= {pokeballLogo}\r\n                className= \"pokeball\"\r\n                alt=\"Loading\"\r\n                ></img>\r\n                <p>Loading...</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport \"./css/Pokedex.css\";\r\n\r\nimport PokemonCard from \"./PokemonCard\";\r\nimport Loading from \"./Loading\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nlet NUM_POKEMON = 78;\r\nlet EXTRA_POKEMON= 60;\r\n\r\nexport default class Pokedex extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        \r\n        this.state= \r\n        {\r\n            pokemon: [],\r\n            loading: true,\r\n            isLoadingMore: false\r\n        }\r\n\r\n        this.observer = React.createRef();\r\n    }\r\n\r\n    callBack = (element) =>\r\n    {\r\n        if(this.observer.current) this.observer.current.disconnect();\r\n\r\n        this.observer.current = new IntersectionObserver(entries =>{\r\n            if(entries[0].isIntersecting)\r\n            {\r\n                if(this.LoadPokemon() === false)\r\n                {\r\n                    console.log(\"cant load anymore!\")\r\n                }\r\n            }\r\n        });\r\n\r\n        if(element) this.observer.current.observe(element)\r\n    }\r\n\r\n    async componentDidMount()\r\n    {\r\n        //Here we get the list of all the pokemon from 0 to NUM_POKEMON, the name is included here\r\n        const pokemonList= await axios.get(`https://pokeapi.co/api/v2/pokemon/?offset=0&limit=${NUM_POKEMON}`);\r\n\r\n        //In this we look at each individual pokemon and request more information on them so we can get id\r\n        const pData = pokemonList.data.results.map(async pk =>{\r\n            let pkInfo = await axios.get(pk.url);\r\n            const types = pkInfo.data.types.map(type => type.type)\r\n            return {name: pk.name, id:pkInfo.data.id, types: types}\r\n        });\r\n\r\n        //we wait for all the data to arrive for each pokemon in the pData array\r\n        const pokemonData = await Promise.all(pData);\r\n\r\n        //Updating the state with new the new pokemon array\r\n        this.setState({pokemon: pokemonData, loading: false})\r\n    }\r\n\r\n    async LoadPokemon()\r\n    {\r\n        this.setState({isLoadingMore: true});\r\n        console.log(NUM_POKEMON);\r\n        if(NUM_POKEMON >= 780){\r\n            return false\r\n        }\r\n        //Here we get the list of all the pokemon from 0 to NUM_POKEMON, the name is included here\r\n        const pokemonList= await axios.get(`https://pokeapi.co/api/v2/pokemon/?offset=${NUM_POKEMON}&limit=${EXTRA_POKEMON}`);\r\n\r\n        //In this we look at each individual pokemon and request more information on them so we can get id\r\n        const pData = pokemonList.data.results.map(async pk =>{\r\n            let pkInfo = await axios.get(pk.url);\r\n            const types = pkInfo.data.types.map(type => type.type)\r\n            return {name: pk.name, id:pkInfo.data.id, types: types}\r\n        });\r\n\r\n        //we wait for all the data to arrive for each pokemon in the pData array\r\n        const pokemonData = await Promise.all(pData);\r\n\r\n        NUM_POKEMON = NUM_POKEMON + EXTRA_POKEMON;\r\n\r\n        console.log([...this.state.pokemon, ...pokemonData]);\r\n\r\n        this.setState(st =>\r\n        {\r\n            return {pokemon: [...st.pokemon, ...pokemonData], isLoadingMore: false}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // const pokemonList = this.state.pokemon.map(pk =>{\r\n        //     return <PokemonCard \r\n        //     name= {pk.name}\r\n        //     id= {pk.id} \r\n        //     key={pk.id}\r\n        //     types={pk.types}\r\n        //     goToPokemon={this.goToPokemon}\r\n        //     />\r\n        // }); \r\n\r\n        const pokemonList = this.state.pokemon.map((pk,index) =>{\r\n            if(this.state.pokemon.length-10 === index + 1)\r\n            {\r\n                return(\r\n                <div ref={this.callBack} style= {{display: \"inline-block\"}} key={pk.id}>\r\n                    <PokemonCard \r\n                        name= {pk.name}\r\n                        id= {pk.id} \r\n                        key={pk.id}\r\n                        types={pk.types}\r\n                        goToPokemon={this.goToPokemon}\r\n                    />\r\n                </div>\r\n                )\r\n            }\r\n            else\r\n            {\r\n                return(             \r\n                <div style= {{display: \"inline-block\"}} key={pk.id}>\r\n                    <PokemonCard \r\n                        name= {pk.name}\r\n                        id= {pk.id} \r\n                        key={pk.id}\r\n                        types={pk.types}\r\n                        goToPokemon={this.goToPokemon}\r\n                    />\r\n                </div>\r\n                )\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div >\r\n                <div className = \"header\">\r\n                    <h1>Pokedex</h1>\r\n                    <Link\r\n                    to={`/pokedex/${Math.floor(Math.random()* 721)}`} \r\n                    className=\"Pokedex-random\"\r\n                    >Random</Link>\r\n                </div>\r\n                <div className=\"Pokedex\">\r\n                    {this.state.loading ? <Loading/>: pokemonList}\r\n                    {this.state.isLoadingMore && <Loading/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { chooseColor, capitalize} from \"../helper\";\r\n\r\nexport default class Species extends Component {\r\n    render() {\r\n        return (\r\n            <div className = \"PokemonInfo-species\"\r\n                style={{backgroundColor: chooseColor(this.props.color)}}\r\n                >\r\n                    <h1>Species Info</h1>\r\n                    <div className = \"PokemonInfo-species-item\"><b>Egg Groups:</b> \r\n                        <div className=\"egg-groups\">\r\n                            {this.props.speciesInfo.eggGroups.map(egg => ` ${capitalize(egg)} `)}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className = \"PokemonInfo-species-item gender\">\r\n                        <b>Gender Ratio:</b> \r\n\r\n                        <div className=\"PokemonInfo-gender\">\r\n                            <p> {`${this.props.speciesInfo.genderRatio[0]}%`}<i className=\"fas fa-mars\"></i></p>\r\n                            <p> {`${this.props.speciesInfo.genderRatio[1]}%`}<i className=\"fas fa-venus\"></i></p>\r\n                        </div>\r\n\r\n                    </div>\r\n            \r\n                    <div className = \"PokemonInfo-species-item\">\r\n                    <b>Hatch Steps:</b> {`${this.props.speciesInfo.hatchRate} Steps`}\r\n                    </div>\r\n                    \r\n                    <div className = \"PokemonInfo-species-item\">\r\n                        <b>Catch Rate:</b> {this.props.speciesInfo.catchRate}\r\n                    </div>\r\n\r\n                    <div className = \"PokemonInfo-species-item\">\r\n                        <b>Height:</b> {`${this.props.speciesInfo.height.meters} M\r\n                        (${this.props.speciesInfo.height.feet}) `}\r\n                    </div>\r\n\r\n                    <div className = \"PokemonInfo-species-item\">\r\n                        <b>Weight:</b>{` ${this.props.speciesInfo.weight}lb`}\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {chooseColor, getStats} from \"../helper\";\r\n\r\nexport default class Stats extends Component {\r\n    render() {\r\n        const stats = getStats(this.props.stats);\r\n\r\n        return (\r\n            <div className=\"PokemonInfo-stats\">\r\n                <h1 className = \"Stat-title\">Base Stats</h1>\r\n                {this.props.stats.map((stat,i) => \r\n                 <div className =\"Stat\" key={stat.stat.name}>\r\n                     <p className=\"Stat-name\">{stat.stat.name}</p>\r\n                     <div className=\"Stat-bar\">\r\n                        <div className=\"Stat-bar-fill\"\r\n                        style={{backgroundColor:chooseColor(this.props.color), \r\n                        width:  stats[i]}}\r\n                        >\r\n                            <p className=\"Stat-num\">{stat.base_stat}</p>\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { chooseType } from \"../helper\";\r\n\r\nexport default class MoveLine extends Component {\r\n\r\n    render() {\r\n        const move = this.props.move;\r\n        //{`Lvl:${move.levelLearn}-${move.name} | ${move.moveLearnMethod}`}\r\n        return (\r\n            <div className=\"Moves-row\">\r\n                <div className = \"Moves-stats\">\r\n                <p className= \"Move-attrib\">{move.levelLearn}</p>\r\n                <p className= \"Move-name\">{move.name}</p>\r\n                <img src= {chooseType(move.type)} className= \"Move-type\" alt= {move.type}/>\r\n                {/* <p className= \"Move-attrib\">{move.type}</p> */}\r\n                <p className= \"Move-attrib\">{move.category}</p>\r\n                <p className= \"Move-attrib\">{move.attack !== null? move.attack: \"--\"}</p>\r\n                <p className= \"Move-attrib\">{move.accuracy !== null? move.accuracy: \"--\"}</p>\r\n                <p className= \"Move-attrib\">{move.pp}</p>\r\n                </div>\r\n\r\n                {/* <div className = \"Moves-Effect\">\r\n                    <p>{move.effect}</p>\r\n                </div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport MoveLine from \"./MoveLine\";\r\nimport axios from \"axios\";\r\nimport Loading from \"./Loading\";\r\n\r\nimport { chooseColor } from \"../helper\";\r\n\r\nexport default class Moves extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state= \r\n        {\r\n            moves: [],\r\n            currentMoves: [],\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    changeLearn = (evt) =>{\r\n        this.setState({currentMoves: this.state.moves.filter(move => move.moveLearnMethod === evt.target.getAttribute('name'))})\r\n    }\r\n\r\n    async componentDidMount()\r\n    {   \r\n        let moves = this.props.moves.map(async move =>{\r\n            let moveData = await axios.get(move.url);\r\n            moveData= moveData.data\r\n            \r\n            let test = {\r\n                type: moveData.type.name,\r\n                category: moveData.damage_class.name,\r\n                attack: moveData.power,\r\n                pp: moveData.pp,\r\n                accuracy: moveData.accuracy,\r\n                effect: moveData.effect_entries[0].effect\r\n            }\r\n            return {...move, ...test};\r\n        });\r\n\r\n        moves = await Promise.all(moves);\r\n\r\n        this.setState({moves: moves,\r\n        currentMoves: moves.filter(move => move.moveLearnMethod === \"level-up\"),\r\n        loading:false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"Moves\">\r\n            <h1>Moves</h1>\r\n            <div className = \"Moves-learn\">\r\n                <div style={{background: chooseColor(this.props.color)}}\r\n                name=\"level-up\"\r\n                onClick = {this.changeLearn}\r\n                >Level-Up</div>\r\n                <div style={{background: chooseColor(this.props.color)}}\r\n                name = \"tutor\"\r\n                onClick = {this.changeLearn}\r\n                >Tutor</div>\r\n                <div style={{background: chooseColor(this.props.color)}}\r\n                name=\"egg\"\r\n                onClick = {this.changeLearn}\r\n                >Egg</div>\r\n                <div style={{background: chooseColor(this.props.color)}}\r\n                name=\"machine\"\r\n                onClick = {this.changeLearn}\r\n                >HM/TM</div>\r\n            </div>\r\n            <div className = \"Moves-bar\" style= {{background: chooseColor(this.props.color)}}>\r\n                <p className= \"Move-attrib\">Level</p>\r\n                <p className= \"Move-name\">Attack Name</p>\r\n                <p className= \"Move-type\">Type</p>\r\n                <p className= \"Move-attrib\">Cat.</p>\r\n                <p className= \"Move-attrib\">Attack</p>\r\n                <p className= \"Move-attrib\">Acc.</p>\r\n                <p className= \"Move-attrib\">PP</p>\r\n            </div>\r\n            <div className={this.state.loading? \"Moves-Loading\":\"Pokemon-Info-Moves\"}>\r\n                {this.state.loading? <Loading/>\r\n                :this.state.currentMoves.map(move =><MoveLine move = {move} key = {move.name}/>)}\r\n            </div>\r\n\r\n            <div className=\"Moves-padding\" style= {{background: chooseColor(this.props.color)}}/>\r\n        </div>    \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { chooseType } from \"../helper\";\r\n\r\nexport default class TypeLine extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TypeLine\">\r\n                <h1>{this.props.times}</h1>\r\n                <div className= \"TypeLine-Types\">\r\n                    {this.props.typeEffect.map(type => <img \r\n                    className=\"TypeLine-img\"\r\n                    src= {chooseType(type.name)}\r\n                    alt={type.name}\r\n                    key = {type.name}    \r\n                    />)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport { getMoveMatchup } from \"../helper\";\r\n\r\nimport TypeLine from \"./TypeLine\";\r\n\r\nexport default class TypeMatchups extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            fourTimesEffective:[],//4x\r\n            twoTimesEffective: [],//2x\r\n            notVeryEffective: [],//.25x\r\n            notEffective: [],//.5x\r\n            notDamaged: []//0x\r\n        }\r\n    }\r\n\r\n    async componentDidMount()\r\n    {\r\n        let moveEffList = this.props.types.map(async type => {\r\n\r\n\r\n            let typeData= await axios.get(type.url);\r\n            typeData = typeData.data.damage_relations;\r\n\r\n            return getMoveMatchup(typeData);\r\n        })\r\n\r\n        moveEffList = await Promise.all(moveEffList);\r\n\r\n        let updatedFirstType=[];\r\n        let updatedSecondType=[];\r\n\r\n        //if the pokemon has two types\r\n        if(moveEffList.length === 2)\r\n        {\r\n            //first we check if the two types have any type in common and then multiply the effectiveness\r\n            updatedFirstType = moveEffList[0].map(type =>{\r\n                for(let i=0; i< moveEffList[1].length; i++)\r\n                {\r\n                    if(moveEffList[1][i].name === type.name)\r\n                    {\r\n                        return{name: type.name, effectiveness: moveEffList[1][i].effectiveness * type.effectiveness}\r\n                    }\r\n                }\r\n                return type;\r\n            });\r\n\r\n            //we still have left the types that didnt match so we add them by checking if that type is\r\n            //already included in the array\r\n            let typeNameArray = moveEffList[0].map(item => item.name)\r\n\r\n            //we add type that isnt in the array\r\n            for(let i =0; i< moveEffList[1].length; i++)\r\n            {\r\n                if(!typeNameArray.includes(moveEffList[1][i].name))\r\n                {\r\n                    updatedSecondType.push(moveEffList[1][i]);\r\n                }\r\n            }\r\n\r\n            //finally we have our types!\r\n            const finalTypeMatchups = [...updatedSecondType, ...updatedFirstType].filter(item => item.effectiveness !== 1)\r\n           //filter out 1 since it does not matter to the player\r\n\r\n           console.log(finalTypeMatchups);\r\n           this.setState({\r\n               fourTimesEffective: finalTypeMatchups.filter(type => type.effectiveness === 4),\r\n               twoTimesEffective: finalTypeMatchups.filter(type => type.effectiveness === 2),\r\n               notEffective: finalTypeMatchups.filter(type => type.effectiveness === .5),\r\n               notVeryEffective: finalTypeMatchups.filter(type => type.effectiveness === .25),\r\n               notDamaged: finalTypeMatchups.filter(type => type.effectiveness === 0)\r\n           })\r\n        }\r\n        else\r\n        {\r\n            //if only one type than moveEffList[0] will do!\r\n            this.setState({\r\n                fourTimesEffective: moveEffList[0].filter(type => type.effectiveness === 4),\r\n                twoTimesEffective: moveEffList[0].filter(type => type.effectiveness === 2),\r\n                notEffective: moveEffList[0].filter(type => type.effectiveness === .5),\r\n                notVeryEffective: moveEffList[0].filter(type => type.effectiveness === .25),\r\n                notDamaged: moveEffList[0].filter(type => type.effectiveness === 0)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= \"TypeMatchups\">\r\n                <h1>Type Matchups</h1>\r\n               <TypeLine typeEffect= {this.state.fourTimesEffective} times=\"4X\"/>\r\n               <TypeLine typeEffect= {this.state.twoTimesEffective} times=\"2X\"/>\r\n               <TypeLine typeEffect= {this.state.notEffective} times=\"0.5X\"/>\r\n               <TypeLine typeEffect= {this.state.notVeryEffective} times=\"0.25X\"/>\r\n               <TypeLine typeEffect= {this.state.notDamaged}  times=\"0X\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport Species from \"./Species\";\r\nimport Stats from \"./Stats\";\r\nimport Moves from \"./Moves\";\r\nimport TypeMatchups from \"./TypeMatchups\";\r\nimport Loading from \"./Loading\";\r\nimport { pad , chooseColor, chooseType,getGenderRatio, toFeet, toMeters, evolutionLine,getMoves } from \"../helper\";\r\n\r\n\r\nimport \"./css/PokemonInfo.css\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class PokemonInfo extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state=\r\n        {\r\n            loading:true,\r\n            name:\"\",\r\n            genera:\"\", \r\n            types: [{name:\"\", url:\"\"}],\r\n            speciesInfo: {\r\n                eggGroups: [], \r\n                genderRatio: \"\", \r\n                hatchRate: \"\", \r\n                catchRate: \"\", \r\n                height: {feet:\"\", meters:\"\"}, \r\n                weight: \"\"\r\n            },\r\n            stats: [],\r\n            abilities:[],\r\n            evoLine:[],\r\n            moves:[]\r\n        }\r\n\r\n        this.id = this.props.match.params.id;\r\n        this.url_pokemon = `https://pokeapi.co/api/v2/pokemon/${this.id}`;\r\n        this.url_species = `https://pokeapi.co/api/v2/pokemon-species/${this.id}/`;\r\n    }\r\n\r\n    async componentDidMount()\r\n    {\r\n        let pokemon = await axios.get(this.url_pokemon);\r\n        pokemon = pokemon.data;\r\n\r\n        let species = await axios.get(this.url_species);\r\n        species = species.data;\r\n\r\n        \r\n        //getting Evolution Line URL\r\n        const evoURL = species.evolution_chain.url;\r\n        let evolutions = await axios.get(evoURL);\r\n        evolutions = evolutions.data.chain;\r\n\r\n\r\n        //getting genera\r\n        let genera = species.genera.filter(text => text.language.name === \"en\");\r\n        genera = genera[0].genus;\r\n\r\n        //getting types\r\n        const types = pokemon.types.map(type => type.type);\r\n\r\n        //Getting eggGroups\r\n        const eggGroups = species.egg_groups.map(group => group.name);\r\n        \r\n        //getting gender ratio\r\n        const genderRatio = getGenderRatio(species.gender_rate);\r\n\r\n        //getting hatch rate\r\n        const hatchRate = (species.hatch_counter + 1) * 255;\r\n\r\n        //getting catch rate\r\n        const catchRate = species.capture_rate;\r\n\r\n        //getting height and weight\r\n        const height = {meters: toMeters(pokemon.height), feet: toFeet(pokemon.height)};\r\n        const weight = Math.round(10* (pokemon.weight/4.536))/10;\r\n\r\n        //Getting stats\r\n        const stats = pokemon.stats;\r\n\r\n        //getting abilities\r\n        const abilities = pokemon.abilities;\r\n\r\n        //getting evolutions\r\n        const evoLine = evolutionLine(evolutions);\r\n        evoLine.forEach(evo => {\r\n            evo.id = evo.evolution.url.split(\"/\")[6]\r\n        });\r\n\r\n        //Getting Moves and getting info for each\r\n        let moveList =  getMoves(pokemon.moves);\r\n\r\n        \r\n        this.setState({\r\n            loading:false,\r\n            name:pokemon.name, \r\n            genera: genera, types: types,\r\n            speciesInfo: {eggGroups: eggGroups, \r\n                genderRatio, \r\n                hatchRate: hatchRate,\r\n                catchRate:catchRate,\r\n                height: height,\r\n                weight:weight\r\n            },\r\n            stats:stats,\r\n            abilities: abilities,\r\n            evoLine:evoLine,\r\n            moves:moveList\r\n        })\r\n    }\r\n\r\n    goNext = () =>{\r\n        //TODO make sure user cant go past max or min\r\n        console.log(+this.id + 1);\r\n        if(+this.id + 1 === 808)\r\n        {\r\n            this.props.history.push(`/pokedex/1`);\r\n        }\r\n        else\r\n        {\r\n            this.props.history.push(`/pokedex/${parseInt(this.id)+1}`);\r\n        }\r\n    }\r\n\r\n    goPrevious = () =>{\r\n        this.props.history.push(`/pokedex/${parseInt(this.id)-1}`);\r\n    }\r\n\r\n    goTo = (num) =>\r\n    {\r\n        this.props.history.push(`/pokedex/${num}`);\r\n    }\r\n\r\n    render() {\r\n        this.state.moves.sort((a,b) => a.levelLearn-b.levelLearn);\r\n        return (\r\n            this.state.loading? <Loading/>: <div className=\"PokemonInfo\">\r\n                <div className= \"PokemonInfo-title\">\r\n                    <h1 \r\n                    onClick= {this.goPrevious} \r\n                    className = \"arrow\"\r\n                    >\r\n                    <i className=\"fas fa-arrow-left\"></i>\r\n                    </h1>\r\n\r\n                    <h1 className = \"PokemonInfo-name\">{this.state.name}</h1>\r\n                    <h1 className = \"PokemonInfo-id\">{`#${this.id}`}</h1>\r\n\r\n                    <h1 \r\n                    onClick= {this.goNext} \r\n                    className = \"arrow\"\r\n                    >\r\n                    <i className=\"fas fa-arrow-right\"></i>\r\n                    </h1>\r\n                </div>\r\n\r\n                <Link\r\n                    className= \"exit\" \r\n                    to=\"/pokedex\"><i className=\"fas fa-times\"></i>\r\n                </Link>\r\n                \r\n                <h2 className = \"PokemonInfo-genus\"\r\n                style={{backgroundColor: chooseColor(this.state.types[0].name)}}\r\n                >{`The ${this.state.genera}`}</h2>\r\n\r\n                <div className = \"PokemonInfo-img-container\">\r\n                    <img src= {`https://assets.pokemon.com/assets/cms2/img/pokedex/full/${pad(this.id, 3)}.png`}\r\n                    alt = {this.state.name}\r\n                    className = \"PokemonInfo-img\"\r\n                    />\r\n                </div>\r\n\r\n                <div className = \"PokemonInfo-types\">\r\n                    {this.state.types.map(type => <img \r\n                    src={chooseType(type.name)} \r\n                    alt={type.name} \r\n                    key= {type.name}\r\n                    />)}\r\n                </div>\r\n                \r\n                <div className= \"PokemonInfo-Row-1\">\r\n\r\n                    <Species \r\n                        color = {this.state.types[0].name}\r\n                        speciesInfo = {this.state.speciesInfo}\r\n                    />\r\n\r\n                    <Stats stats = {this.state.stats} \r\n                        color= {this.state.types[0].name}\r\n                    />\r\n                </div>\r\n\r\n\r\n                <div className= \"PokemonInfo-abilities\">\r\n                    {/* TODO: Make this a component where if the item is hovered it shows description of ability */}\r\n                    <h1>Abilities</h1>\r\n                    <div className = \"ability-container\">\r\n                        {this.state.abilities.map (ability => \r\n                            <div className= \"ability\"\r\n                            key = {ability.ability.name}\r\n                            style={ability.is_hidden? {}:{backgroundColor: chooseColor(this.state.types[0].name)}}\r\n                            >{ability.ability.name}</div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = \"Pokemon-Info-evolutions\">\r\n                    <h1>Evolution Line</h1>\r\n                    <div className=\"evolutions\">\r\n                        {this.state.evoLine.map(evo =>\r\n                            <div key = {evo.id} onClick = {this.goTo.bind(this ,evo.id)} className= \"evolution\">\r\n                                <div>\r\n                                    <img src={`https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${pad(evo.id, 3)}.png`}\r\n                                        alt= {evo.name}\r\n                                    />\r\n                                    <p>{evo.evolution.name}</p>\r\n                                </div>\r\n                                {evo.hasNext && <i className=\"fas fa-arrow-right fa-2x evolution-arrow\"></i>}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <Moves moves = {this.state.moves} color= {this.state.types[0].name}/>\r\n                \r\n                <TypeMatchups types = {this.state.types}/>\r\n\r\n            </div>           \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport './App.css';\n\nimport Pokedex from \"./components/Pokedex\";\nimport PokemonInfo from \"./components/PokemonInfo\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/pokedex\" render={(props) => <Pokedex {...props}/>}/>\n          <Route exact path=\"/pokedex/:id\" render={(props) => <PokemonInfo {...props}\n            key ={`testid= /pokedex/:${props.match.params.id}`}  \n          />}/>\n          <Redirect to = \"/pokedex\"/>\n        </Switch>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}